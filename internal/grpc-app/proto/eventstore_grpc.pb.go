// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: eventstore.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EventStoreService_Read_FullMethodName   = "/eventstore.EventStoreService/Read"
	EventStoreService_Append_FullMethodName = "/eventstore.EventStoreService/Append"
	EventStoreService_Health_FullMethodName = "/eventstore.EventStoreService/Health"
)

// EventStoreServiceClient is the client API for EventStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EventStoreService provides gRPC endpoints for event sourcing operations
type EventStoreServiceClient interface {
	// Read reads events matching a query, optionally starting from a specified sequence position
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Append atomically persists one or more events, optionally with an append condition
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	// Health check endpoint
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type eventStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreServiceClient(cc grpc.ClientConnInterface) EventStoreServiceClient {
	return &eventStoreServiceClient{cc}
}

func (c *eventStoreServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, EventStoreService_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreServiceClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, EventStoreService_Append_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, EventStoreService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStoreServiceServer is the server API for EventStoreService service.
// All implementations must embed UnimplementedEventStoreServiceServer
// for forward compatibility
//
// EventStoreService provides gRPC endpoints for event sourcing operations
type EventStoreServiceServer interface {
	// Read reads events matching a query, optionally starting from a specified sequence position
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Append atomically persists one or more events, optionally with an append condition
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	// Health check endpoint
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedEventStoreServiceServer()
}

// UnimplementedEventStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventStoreServiceServer struct {
}

func (UnimplementedEventStoreServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedEventStoreServiceServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedEventStoreServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedEventStoreServiceServer) mustEmbedUnimplementedEventStoreServiceServer() {}

// UnsafeEventStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServiceServer will
// result in compilation errors.
type UnsafeEventStoreServiceServer interface {
	mustEmbedUnimplementedEventStoreServiceServer()
}

func RegisterEventStoreServiceServer(s grpc.ServiceRegistrar, srv EventStoreServiceServer) {
	s.RegisterService(&EventStoreService_ServiceDesc, srv)
}

func _EventStoreService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStoreService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStoreService_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServiceServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStoreService_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServiceServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStoreService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStoreService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStoreService_ServiceDesc is the grpc.ServiceDesc for EventStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventstore.EventStoreService",
	HandlerType: (*EventStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _EventStoreService_Read_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _EventStoreService_Append_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _EventStoreService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventstore.proto",
}
